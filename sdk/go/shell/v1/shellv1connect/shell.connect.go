// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: shell/v1/shell.proto

package shellv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/HJH0924/agent-sandbox/sdk/go/shell/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ShellServiceName is the fully-qualified name of the ShellService service.
	ShellServiceName = "shell.v1.ShellService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ShellServiceExecuteProcedure is the fully-qualified name of the ShellService's Execute RPC.
	ShellServiceExecuteProcedure = "/shell.v1.ShellService/Execute"
)

// ShellServiceClient is a client for the shell.v1.ShellService service.
type ShellServiceClient interface {
	Execute(context.Context, *connect.Request[v1.ExecuteRequest]) (*connect.Response[v1.ExecuteResponse], error)
}

// NewShellServiceClient constructs a client for the shell.v1.ShellService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShellServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ShellServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	shellServiceMethods := v1.File_shell_v1_shell_proto.Services().ByName("ShellService").Methods()
	return &shellServiceClient{
		execute: connect.NewClient[v1.ExecuteRequest, v1.ExecuteResponse](
			httpClient,
			baseURL+ShellServiceExecuteProcedure,
			connect.WithSchema(shellServiceMethods.ByName("Execute")),
			connect.WithClientOptions(opts...),
		),
	}
}

// shellServiceClient implements ShellServiceClient.
type shellServiceClient struct {
	execute *connect.Client[v1.ExecuteRequest, v1.ExecuteResponse]
}

// Execute calls shell.v1.ShellService.Execute.
func (c *shellServiceClient) Execute(ctx context.Context, req *connect.Request[v1.ExecuteRequest]) (*connect.Response[v1.ExecuteResponse], error) {
	return c.execute.CallUnary(ctx, req)
}

// ShellServiceHandler is an implementation of the shell.v1.ShellService service.
type ShellServiceHandler interface {
	Execute(context.Context, *connect.Request[v1.ExecuteRequest]) (*connect.Response[v1.ExecuteResponse], error)
}

// NewShellServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShellServiceHandler(svc ShellServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	shellServiceMethods := v1.File_shell_v1_shell_proto.Services().ByName("ShellService").Methods()
	shellServiceExecuteHandler := connect.NewUnaryHandler(
		ShellServiceExecuteProcedure,
		svc.Execute,
		connect.WithSchema(shellServiceMethods.ByName("Execute")),
		connect.WithHandlerOptions(opts...),
	)
	return "/shell.v1.ShellService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShellServiceExecuteProcedure:
			shellServiceExecuteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShellServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShellServiceHandler struct{}

func (UnimplementedShellServiceHandler) Execute(context.Context, *connect.Request[v1.ExecuteRequest]) (*connect.Response[v1.ExecuteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("shell.v1.ShellService.Execute is not implemented"))
}
