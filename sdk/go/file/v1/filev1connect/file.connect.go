// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: file/v1/file.proto

package filev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/HJH0924/agent-sandbox/sdk/go/file/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "file.v1.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServiceReadProcedure is the fully-qualified name of the FileService's Read RPC.
	FileServiceReadProcedure = "/file.v1.FileService/Read"
	// FileServiceWriteProcedure is the fully-qualified name of the FileService's Write RPC.
	FileServiceWriteProcedure = "/file.v1.FileService/Write"
	// FileServiceEditProcedure is the fully-qualified name of the FileService's Edit RPC.
	FileServiceEditProcedure = "/file.v1.FileService/Edit"
)

// FileServiceClient is a client for the file.v1.FileService service.
type FileServiceClient interface {
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
	Write(context.Context, *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error)
	Edit(context.Context, *connect.Request[v1.EditRequest]) (*connect.Response[v1.EditResponse], error)
}

// NewFileServiceClient constructs a client for the file.v1.FileService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	fileServiceMethods := v1.File_file_v1_file_proto.Services().ByName("FileService").Methods()
	return &fileServiceClient{
		read: connect.NewClient[v1.ReadRequest, v1.ReadResponse](
			httpClient,
			baseURL+FileServiceReadProcedure,
			connect.WithSchema(fileServiceMethods.ByName("Read")),
			connect.WithClientOptions(opts...),
		),
		write: connect.NewClient[v1.WriteRequest, v1.WriteResponse](
			httpClient,
			baseURL+FileServiceWriteProcedure,
			connect.WithSchema(fileServiceMethods.ByName("Write")),
			connect.WithClientOptions(opts...),
		),
		edit: connect.NewClient[v1.EditRequest, v1.EditResponse](
			httpClient,
			baseURL+FileServiceEditProcedure,
			connect.WithSchema(fileServiceMethods.ByName("Edit")),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	read  *connect.Client[v1.ReadRequest, v1.ReadResponse]
	write *connect.Client[v1.WriteRequest, v1.WriteResponse]
	edit  *connect.Client[v1.EditRequest, v1.EditResponse]
}

// Read calls file.v1.FileService.Read.
func (c *fileServiceClient) Read(ctx context.Context, req *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// Write calls file.v1.FileService.Write.
func (c *fileServiceClient) Write(ctx context.Context, req *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error) {
	return c.write.CallUnary(ctx, req)
}

// Edit calls file.v1.FileService.Edit.
func (c *fileServiceClient) Edit(ctx context.Context, req *connect.Request[v1.EditRequest]) (*connect.Response[v1.EditResponse], error) {
	return c.edit.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the file.v1.FileService service.
type FileServiceHandler interface {
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
	Write(context.Context, *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error)
	Edit(context.Context, *connect.Request[v1.EditRequest]) (*connect.Response[v1.EditResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServiceMethods := v1.File_file_v1_file_proto.Services().ByName("FileService").Methods()
	fileServiceReadHandler := connect.NewUnaryHandler(
		FileServiceReadProcedure,
		svc.Read,
		connect.WithSchema(fileServiceMethods.ByName("Read")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceWriteHandler := connect.NewUnaryHandler(
		FileServiceWriteProcedure,
		svc.Write,
		connect.WithSchema(fileServiceMethods.ByName("Write")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceEditHandler := connect.NewUnaryHandler(
		FileServiceEditProcedure,
		svc.Edit,
		connect.WithSchema(fileServiceMethods.ByName("Edit")),
		connect.WithHandlerOptions(opts...),
	)
	return "/file.v1.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServiceReadProcedure:
			fileServiceReadHandler.ServeHTTP(w, r)
		case FileServiceWriteProcedure:
			fileServiceWriteHandler.ServeHTTP(w, r)
		case FileServiceEditProcedure:
			fileServiceEditHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("file.v1.FileService.Read is not implemented"))
}

func (UnimplementedFileServiceHandler) Write(context.Context, *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("file.v1.FileService.Write is not implemented"))
}

func (UnimplementedFileServiceHandler) Edit(context.Context, *connect.Request[v1.EditRequest]) (*connect.Response[v1.EditResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("file.v1.FileService.Edit is not implemented"))
}
